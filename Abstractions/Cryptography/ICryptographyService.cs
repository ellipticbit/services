//-----------------------------------------------------------------------------
// Copyright (c) 2020-2023 EllipticBit, LLC All Rights Reserved.
//-----------------------------------------------------------------------------

using System.IO;

namespace EllipticBit.Services.Cryptography
{
	public enum VerifyPasswordResult
	{
		Success,
		Failure,
		Rehash,
	}

	public interface ICryptographyService
	{
		/// <summary>
		/// Calculates the equality of an array of bytes in the constant time.
		/// </summary>
		/// <param name="a">The first byte array to compare.</param>
		/// <param name="b">The second byte array to compare.</param>
		/// <returns>Value indicating whether or not the values are equal</returns>
		bool ConstantTimeEquality(byte[] a, byte[] b);
		/// <summary>
		/// Generates a cryptographically secure n-length array of bytes.
		/// </summary>
		/// <param name="bytes">The number of bytes to generate.</param>
		/// <returns>The generated bytes.</returns>
		byte[] RandomBytes(int bytes);
		/// <summary>
		/// Calculates a hash of the provided byte array.
		/// </summary>
		/// <param name="data">The data to hash.</param>
		/// <param name="algorithm">Optional. Used to specify which Hashing algorithm to use.</param>
		/// <returns>The hash value as an array of bytes.</returns>
		byte[] Hash(byte[] data, HashAlgorithm algorithm = HashAlgorithm.Default);
		/// <summary>
		/// Calculates a cryptographically secure hash of the provided byte array using the provided key material.
		/// </summary>
		/// <param name="key">The key used to hash the data.</param>
		/// <param name="data">The data to hash.</param>
		/// <param name="algorithm">Optional. Used to specify which Hashing algorithm to use.</param>
		/// <returns>The hash value as an array of bytes.</returns>
		byte[] Hash(byte[] key, byte[] data, HashAlgorithm algorithm = HashAlgorithm.Default);
		/// <summary>
		/// Calculates a hash of the provided byte array.
		/// </summary>
		/// <param name="data">The data stream to hash.</param>
		/// <param name="algorithm">Optional. Used to specify which Hashing algorithm to use.</param>
		/// <returns>The hash value as an array of bytes.</returns>
		byte[] Hash(Stream data, HashAlgorithm algorithm = HashAlgorithm.Default);
		/// <summary>
		/// Calculates a cryptographically secure hash of the provided byte array using the provided key material.
		/// </summary>
		/// <param name="key">The key used to hash the data.</param>
		/// <param name="data">The data stream to hash.</param>
		/// <param name="algorithm">Optional. Used to specify which Hashing algorithm to use.</param>
		/// <returns>The hash value as an array of bytes.</returns>
		byte[] Hash(byte[] key, Stream data, HashAlgorithm algorithm = HashAlgorithm.Default);
		/// <summary>
		///	Encrypts data securely for storage.
		/// </summary>
		/// <param name="key">The key used to encrypt the data.</param>
		/// <param name="data">The data to encrypt.</param>
		/// <param name="salt">The salt value used to secure the data during encryption.</param>
		/// <returns>Returns a byte array with the decrypted plaintext.</returns>
		string Encrypt(byte[] key, byte[] data, byte[] salt = null);
		/// <summary>
		///	Encrypts data securely for storage.
		/// </summary>
		/// <param name="key">The key used to encrypt the data.</param>
		/// <param name="data">The data to encrypt.</param>
		/// <param name="salt">The salt value used to secure the data during encryption.</param>
		/// <returns>Returns a byte array with the decrypted plaintext.</returns>
		string Encrypt(string key, byte[] data, byte[] salt = null);
		/// <summary>
		///	Decrypts data previously encrypted with the Encrypt method.
		/// </summary>
		/// <param name="key">The key used to decrypt the data.</param>
		/// <param name="data">The data to decrypt.</param>
		/// <param name="salt">The salt value used to secure the data during encryption.</param>
		/// <returns>Returns a byte array with the decrypted plaintext.</returns>
		byte[] Decrypt(byte[] key, string data, byte[] salt = null);
		/// <summary>
		///	Decrypts data previously encrypted with the Encrypt method.
		/// </summary>
		/// <param name="key">The key used to decrypt the data.</param>
		/// <param name="data">The data to decrypt.</param>
		/// <param name="salt">The salt value used to secure the data during encryption.</param>
		/// <returns>Returns a byte array with the decrypted plaintext.</returns>
		byte[] Decrypt(string key, string data, byte[] salt = null);
		/// <summary>
		/// Securely hashes the provided password for storage.
		/// </summary>
		/// <param name="password">The password to store.</param>
		/// <param name="pepper">A pepper value to secure the password during derivation.</param>
		/// <param name="associatedData">Unencrypted associated data to be stored with the secured password.</param>
		/// <returns></returns>
		string SecurePassword(string password, byte[] pepper = null, byte[] associatedData = null);
		/// <summary>
		/// Verifies a user supplied password with a previously secured password.
		/// </summary>
		/// <param name="storedPassword">The hashed password to verify.</param>
		/// <param name="suppliedPassword">The password from the user.</param>
		/// <param name="pepper">The pepper value used to secure the password during derivation.</param>
		/// <param name="associatedData">Unencrypted associated data stored with the secured password.</param>
		/// <returns></returns>
		VerifyPasswordResult VerifyPassword(string storedPassword, string suppliedPassword, byte[] pepper = null, byte[] associatedData = null);
		/// <summary>
		/// Derives key material from a password and salt.
		/// </summary>
		/// <param name="password">The password to derive the key from.</param>
		/// <param name="salt">A salt value to secure the password during derivation.</param>
		/// <param name="requiredBytes">The number of required bytes.</param>
		/// <returns>A byte array containing the key material.</returns>
		byte[] DeriveKey(string password, byte[] salt, int requiredBytes);
	}
}
